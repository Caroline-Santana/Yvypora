Index: app/src/main/java/com/example/yvypora/InicialScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:OptIn(ExperimentalPagerApi::class)\r\n\r\npackage com.example.yvypora\r\n\r\n\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.RatingBar\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.foundation.*\r\nimport androidx.compose.foundation.gestures.Orientation\r\nimport androidx.compose.foundation.gestures.rememberScrollableState\r\nimport androidx.compose.foundation.gestures.scrollable\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.foundation.lazy.LazyRow\r\nimport androidx.compose.foundation.lazy.items\r\nimport androidx.compose.foundation.shape.CircleShape\r\nimport androidx.compose.foundation.shape.CornerSize\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.graphicsLayer\r\nimport androidx.compose.ui.layout.ContentScale\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.colorResource\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.util.lerp\r\nimport androidx.compose.ui.viewinterop.AndroidView\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport androidx.navigation.compose.rememberNavController\r\nimport com.example.yvypora.model.template\r\nimport com.example.yvypora.models.Product\r\nimport com.example.yvypora.navbar.ItemsMenu\r\nimport com.example.yvypora.navbar.NavigationHost\r\nimport com.example.yvypora.ui.theme.YvyporaTheme\r\nimport com.google.accompanist.pager.*\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.delay\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.yield\r\nimport kotlin.math.absoluteValue\r\n\r\nclass InicialScreen : ComponentActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContent {\r\n            YvyporaTheme {\r\n                HomeScreen()\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun Header() {\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(55.dp)\r\n            .padding(top = 40.dp, start = 15.dp, end = 15.dp),\r\n        horizontalArrangement = Arrangement.SpaceBetween,\r\n    ) {\r\n        Image(\r\n            painter = painterResource(id = R.drawable.logo_no_name),\r\n            modifier = Modifier\r\n                .height(58.dp)\r\n                .width(55.dp),\r\n            alignment = Alignment.BottomStart,\r\n            contentDescription = \"logo\",\r\n\r\n            )\r\n        Image(\r\n            painter = painterResource(id = R.drawable.icon_user),\r\n            modifier = Modifier\r\n                .height(50.dp)\r\n                .width(55.dp),\r\n\r\n            contentDescription = \"logo\",\r\n\r\n            )\r\n    }\r\n}\r\n\r\n@OptIn(ExperimentalPagerApi::class)\r\n@Composable\r\nfun UpsideLayout() {\r\n    val offset = remember { mutableStateOf(0f) }\r\n    var searchState by remember {\r\n        mutableStateOf(\"\")\r\n    }\r\n    Column(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .fillMaxSize()\r\n            .padding(top = 125.dp)\r\n            .scrollable(state = rememberScrollableState() { delta ->\r\n                offset.value = offset.value + delta\r\n                delta // indicate that we consumed all the pixels available\r\n            }, orientation = Orientation.Vertical),\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        OutlinedTextField(value = searchState,\r\n            modifier = Modifier\r\n                .fillMaxWidth()\r\n                .height(45.dp)\r\n                .padding(start = 25.dp, end = 25.dp),\r\n            onValueChange = {\r\n                searchState = it\r\n            },\r\n            colors = TextFieldDefaults.textFieldColors(\r\n                backgroundColor = colorResource(id = R.color.transparentgreen_yvy),\r\n                focusedIndicatorColor = colorResource(id = R.color.green_yvy),\r\n                unfocusedIndicatorColor = colorResource(id = R.color.transparentgreen_yvy),\r\n                cursorColor = colorResource(id = R.color.darkgreen_yvy)\r\n            ),\r\n            shape = RoundedCornerShape(20.dp),\r\n            trailingIcon = {\r\n                Icon(\r\n                    painter = painterResource(R.drawable.lupa_icon),\r\n                    contentDescription = stringResource(id = R.string.lupa),\r\n                    modifier = Modifier\r\n                        .width(35.dp)\r\n                        .height(35.dp)\r\n                        .padding(end = 10.dp),\r\n                    tint = Color.White\r\n                )\r\n            })\r\n        Spacer(\r\n            modifier = Modifier.height(15.dp)\r\n        )\r\n        // Função dos atalhos para outras telas\r\n        Shortcuts()\r\n\r\n    }\r\n\r\n    AutoSliding()\r\n    TabLayoutScreen()\r\n\r\n\r\n}\r\n\r\n@Composable\r\nfun HomeScreen() {\r\n   val navController = rememberNavController()\r\n    val scaffoldState = rememberScaffoldState()\r\n    val scope = rememberCoroutineScope()\r\n    val navigation_item = listOf(\r\n        ItemsMenu.Pantalla1,\r\n        ItemsMenu.Pantalla2,\r\n        ItemsMenu.Pantalla3,\r\n        ItemsMenu.Pantalla4,\r\n    )\r\n    \r\n    Scaffold(\r\n        scaffoldState = scaffoldState,\r\n        bottomBar = { NavegationInferior(navController,navigation_item)},\r\n        floatingActionButton = {Fab(scope,scaffoldState)}\r\n    )\r\n\r\n    {\r\n        it.toString()\r\n        NavigationHost(navController)\r\n    }\r\n}\r\n\r\n@Composable\r\nfun Fab(scope: CoroutineScope, scaffoldState: ScaffoldState) {\r\n            FloatingActionButton(\r\n                onClick = {\r\n                    scope.launch { scaffoldState.snackbarHostState\r\n                        .showSnackbar(\"blbla\",\r\n                            actionLabel = \"bsljdjsskd\",\r\n                            duration = SnackbarDuration.Indefinite) }\r\n            },\r\n            backgroundColor = colorResource(id = R.color.green_yvy)\r\n\r\n                ) {\r\n                    Icon(painter = painterResource(id = R.drawable.shopping_cart) , contentDescription = \"shopping\" )\r\n            }\r\n}\r\n\r\n@Composable\r\nfun currentRoute(navController: NavHostController): String?{\r\n    val entrada by navController.currentBackStackEntryAsState()\r\n    return entrada?.destination?.route\r\n}\r\n\r\n@Composable\r\nfun NavegationInferior(navController: NavHostController, menu_items: List<ItemsMenu>) \r\n{\r\n    BottomAppBar() {\r\n        BottomNavigation()\r\n        {\r\n            val currentRoute = currentRoute(navController = navController)\r\n            menu_items.forEach{ item ->\r\n                BottomNavigationItem(\r\n                    selected = currentRoute == item.rota,\r\n                    onClick = { navController.navigate(item.rota) },\r\n                    icon = {\r\n                        Icon(painter = painterResource(id = item.icon), contentDescription = \"\")\r\n                    },\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Composable\r\nfun TabLayoutScreen() {\r\n\r\n    val tabData = listOf(\r\n        stringResource(id = R.string.all),\r\n        stringResource(id = R.string.discount),\r\n        stringResource(id = R.string.near)\r\n    )\r\n    val pagerState = rememberPagerState(\r\n        pageCount = tabData.size,\r\n        initialOffscreenLimit = 2,\r\n        infiniteLoop = true,\r\n        initialPage = 1,\r\n    )\r\n    val tabIndex = pagerState.currentPage\r\n    val coroutineScope = rememberCoroutineScope()\r\n    Column(\r\n        modifier = Modifier.padding(top = 552.dp)\r\n    ) {\r\n        TabRow(\r\n            selectedTabIndex = tabIndex,\r\n            indicator = { tabPositions ->\r\n                TabRowDefaults.Indicator(\r\n                    Modifier.pagerTabIndicatorOffset(pagerState, tabPositions)\r\n                )\r\n            },\r\n            backgroundColor = Color.Unspecified,\r\n            contentColor = colorResource(id = R.color.green_yvy),\r\n\r\n            ) {\r\n            tabData.forEachIndexed { index, pair ->\r\n                Tab(\r\n                    selected = tabIndex == index,\r\n                    onClick = {\r\n                        coroutineScope.launch {\r\n                            pagerState.animateScrollToPage(index)\r\n                        }\r\n                    },\r\n                    text = {\r\n                        Text(\r\n                            text = tabData[index],\r\n                        )\r\n                    },\r\n                    selectedContentColor = colorResource(id = R.color.green_yvy),\r\n                    unselectedContentColor = colorResource(id = R.color.darkgreen_yvy),\r\n                )\r\n            }\r\n        }\r\n        HorizontalPager(\r\n            state = pagerState, modifier = Modifier.weight(1f)\r\n        ) { index ->\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxSize()\r\n                    .padding(10.dp),\r\n                verticalArrangement = Arrangement.Center,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                when (tabIndex) {\r\n                    0 -> ListOfProducts(products = list)\r\n                    1 -> ListOfProducts(products = list)\r\n                    2 -> ListOfProducts(products = list)\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// MOCKEAD\r\n// TODO PEGAR A LISTA\r\n\r\nval list = listOf<Product>(\r\n    Product(\r\n        name = \"Abobrinha\",\r\n        photo = \"https://conteudo.imguol.com.br/c/entretenimento/5c/2019/04/25/abobrinha-1556223714538_v2_450x337.jpg\",\r\n        price = 6.00F,\r\n        qtdeProduct = 200\r\n    ), Product(\r\n        name = \"Abobrinha\",\r\n        photo = \"https://conteudo.imguol.com.br/c/entretenimento/5c/2019/04/25/abobrinha-1556223714538_v2_450x337.jpg\",\r\n        price = 6.00F,\r\n        qtdeProduct = 200\r\n    ), Product(\r\n        name = \"Abobrinha\",\r\n        photo = \"https://conteudo.imguol.com.br/c/entretenimento/5c/2019/04/25/abobrinha-1556223714538_v2_450x337.jpg\",\r\n        price = 6.00F,\r\n        qtdeProduct = 200\r\n    ), Product(\r\n        name = \"Abobrinha\",\r\n        photo = \"https://conteudo.imguol.com.br/c/entretenimento/5c/2019/04/25/abobrinha-1556223714538_v2_450x337.jpg\",\r\n        price = 6.00F,\r\n        qtdeProduct = 200\r\n    ), Product(\r\n        name = \"Abobrinha\",\r\n        photo = \"https://conteudo.imguol.com.br/c/entretenimento/5c/2019/04/25/abobrinha-1556223714538_v2_450x337.jpg\",\r\n        price = 6.00F,\r\n        qtdeProduct = 200\r\n    )\r\n)\r\n\r\n@Composable\r\nfun ListOfProducts(products: List<Product>) {\r\n    LazyRow(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .height(200.dp),\r\n        contentPadding = PaddingValues(0.dp),\r\n    ) {\r\n        items(products) { product -> CardProducts(product) }\r\n    }\r\n}\r\n\r\n\r\n// TODO COMPONENETE DE LISTA --> CARD PRODUCTS\r\n@Composable\r\nfun CardProducts(data: Product) {\r\n    var titleCard = data.name\r\n    var photoProduct = painterResource(id = R.drawable.abobrinha)\r\n    var qtdeProduct = data.qtdeProduct.toString() + \"g\"\r\n    var priceProduct = \"R$\" + data.price.toString()\r\n    Card(\r\n        elevation = 10.dp,\r\n        contentColor = colorResource(id = R.color.darkgreen_yvy),\r\n        modifier = Modifier\r\n            .width(130.dp)\r\n            .height(140.dp),\r\n        border = BorderStroke(1.dp, colorResource(id = R.color.green_yvy))\r\n\r\n    ) {\r\n        Column {\r\n            Column(\r\n                modifier = Modifier.fillMaxWidth(),\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                Text(\r\n                    text = titleCard,\r\n                    modifier = Modifier.padding(top = 4.dp),\r\n                    fontWeight = FontWeight.Bold,\r\n                    fontSize = 14.sp\r\n                )\r\n                // MODIFICAR PARA USAR URL\r\n                Image(\r\n                    painter = photoProduct,\r\n                    contentDescription = \"Product\",\r\n                    modifier = Modifier\r\n                        .width(97.dp)\r\n                        .height(70.dp),\r\n                )\r\n            }\r\n            Box(modifier = Modifier.fillMaxWidth()) {\r\n                Text(\r\n                    text = qtdeProduct,\r\n                    modifier = Modifier.padding(top = 2.dp, start = 4.dp),\r\n                    color = colorResource(id = R.color.dark_gray),\r\n                    fontWeight = FontWeight.Bold,\r\n                    textAlign = TextAlign.Left,\r\n                    fontSize = 12.sp\r\n                )\r\n\r\n                Row(\r\n                    horizontalArrangement = Arrangement.Center\r\n                ) {\r\n                    Text(\r\n                        text = priceProduct,\r\n                        modifier = Modifier.padding(top = 20.dp, start = 12.dp, end = 15.dp),\r\n                        fontWeight = FontWeight.Bold,\r\n                        textAlign = TextAlign.Left,\r\n                        fontSize = 14.sp\r\n                    )\r\n                    OutlinedButton(\r\n                        onClick = { },\r\n                        modifier = Modifier.size(40.dp),\r\n                        shape = CircleShape,\r\n                        border = BorderStroke(5.dp, colorResource(id = R.color.darkgreen_yvy)),\r\n                        contentPadding = PaddingValues(0.dp),\r\n                        colors = ButtonDefaults.outlinedButtonColors(\r\n                            backgroundColor = colorResource(\r\n                                id = R.color.darkgreen_yvy\r\n                            )\r\n                        )\r\n                    ) {\r\n                        // Adding an Icon \"Add\" inside the Button\r\n                        Icon(\r\n                            painter = painterResource(id = R.drawable.shopping_cart),\r\n                            contentDescription = \"content description\",\r\n                            tint = Color.White\r\n                        )\r\n                    }\r\n\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun Shortcuts() {\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(start = 25.dp, end = 25.dp),\r\n        horizontalArrangement = Arrangement.SpaceBetween\r\n    ) {\r\n        Image(\r\n            painter = painterResource(id = R.drawable.fruits_category_icon),\r\n            modifier = Modifier\r\n                .height(80.dp)\r\n                .width(70.dp),\r\n            contentDescription = \"Fruit\"\r\n        )\r\n        Image(\r\n            painter = painterResource(id = R.drawable.vegetables_category_icon),\r\n            modifier = Modifier\r\n                .height(80.dp)\r\n                .width(70.dp),\r\n            contentDescription = \"Vegetables\"\r\n        )\r\n        Image(\r\n            painter = painterResource(id = R.drawable.spices_category_icon),\r\n            modifier = Modifier\r\n                .height(80.dp)\r\n                .width(70.dp),\r\n            contentDescription = \"Spices\"\r\n        )\r\n        Image(\r\n            painter = painterResource(id = R.drawable.others_category_icon),\r\n            modifier = Modifier\r\n                .height(80.dp)\r\n                .width(70.dp),\r\n            contentDescription = \"Others\"\r\n        )\r\n\r\n    }\r\n\r\n    Row(\r\n        modifier = Modifier\r\n            .fillMaxWidth()\r\n            .padding(start = 25.dp, end = 25.dp),\r\n        horizontalArrangement = Arrangement.SpaceBetween\r\n    ) {\r\n        Text(\r\n            text = stringResource(id = R.string.fruits),\r\n            modifier = Modifier\r\n                .height(80.dp)\r\n                .width(70.dp),\r\n            fontSize = 16.sp,\r\n            textAlign = TextAlign.Center\r\n        )\r\n        Text(\r\n            text = stringResource(id = R.string.vegetable),\r\n            modifier = Modifier\r\n                .height(80.dp)\r\n                .width(70.dp),\r\n            fontSize = 16.sp,\r\n            textAlign = TextAlign.Center\r\n        )\r\n        Text(\r\n            text = stringResource(id = R.string.spices),\r\n            modifier = Modifier\r\n                .height(80.dp)\r\n                .width(70.dp),\r\n            fontSize = 16.sp,\r\n            textAlign = TextAlign.Center\r\n        )\r\n        Text(\r\n            text = stringResource(id = R.string.other),\r\n            modifier = Modifier\r\n                .height(80.dp)\r\n                .width(70.dp),\r\n            fontSize = 16.sp,\r\n            textAlign = TextAlign.Center\r\n        )\r\n    }\r\n}\r\n\r\n@ExperimentalPagerApi\r\n@Composable\r\nfun AutoSliding() {\r\n    val pagerState = rememberPagerState(pageCount = template.size, initialOffscreenLimit = 2)\r\n\r\n    LaunchedEffect(Unit) {\r\n        while (true) {\r\n            yield()\r\n            delay(2000)\r\n            pagerState.animateScrollToPage(\r\n                page = (pagerState.currentPage + 1) % (pagerState.pageCount),\r\n                animationSpec = tween(600)\r\n            )\r\n        }\r\n    }\r\n\r\n    Column(modifier = Modifier.padding(top = 60.dp)) {\r\n        HorizontalPager(\r\n            state = pagerState, modifier = Modifier.weight(1f)\r\n        ) { page ->\r\n            Card(modifier = Modifier\r\n                .graphicsLayer {\r\n                    val pageOffset = calculateCurrentOffsetForPage(page).absoluteValue\r\n                    lerp(\r\n                        start = 0.85f, stop = 1f, fraction = 1f - pageOffset.coerceIn(0f, 1f)\r\n                    ).also { scale ->\r\n                        scaleX = scale\r\n                        scaleY = scale\r\n                    }\r\n\r\n                }\r\n                .fillMaxWidth()\r\n                .height(195.dp)\r\n                .padding(15.dp, 0.dp, 15.dp, 0.dp),\r\n                shape = RoundedCornerShape(20.dp)) {\r\n                val template = template[page]\r\n                Box(\r\n                    modifier = Modifier\r\n                        .fillMaxSize()\r\n                        .width(130.dp)\r\n                        .align(Alignment.Center)\r\n                ) {\r\n                    Image(\r\n                        painter = painterResource(\r\n                            id = when (page) {\r\n                                1 -> R.drawable.logo\r\n                                2 -> R.drawable.ofertas\r\n                                3 -> R.drawable.ofertas\r\n                                4 -> R.drawable.ofertas\r\n                                5 -> R.drawable.ofertas\r\n                                else -> R.drawable.logo\r\n                            }\r\n                        ),\r\n                        contentDescription = \"Image\",\r\n                        contentScale = ContentScale.Crop,\r\n                        modifier = Modifier.fillMaxSize()\r\n                    )\r\n\r\n                    Column(\r\n                        modifier = Modifier\r\n                            .align(Alignment.BottomStart)\r\n                            .padding(15.dp)\r\n                    ) {\r\n                        val ratingBar = RatingBar(\r\n                            LocalContext.current,\r\n                            null,\r\n                            androidx.appcompat.R.attr.ratingBarStyleSmall\r\n                        ).apply {\r\n                            rating = template.rating\r\n                        }\r\n                        AndroidView(\r\n                            factory = { ratingBar },\r\n                            modifier = Modifier.padding(0.dp, 8.dp, 0.dp, 0.dp)\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            HorizontalPagerIndicator(\r\n                pagerState = pagerState,\r\n                modifier = Modifier.padding(top = 235.dp),\r\n                activeColor = colorResource(id = R.color.darkgreen_yvy),\r\n                inactiveColor = colorResource(id = R.color.transparentgreen_yvy)\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/yvypora/InicialScreen.kt b/app/src/main/java/com/example/yvypora/InicialScreen.kt
--- a/app/src/main/java/com/example/yvypora/InicialScreen.kt	(revision b6516b0c661bca4d5b2f0e500be2e235ce5d76ef)
+++ b/app/src/main/java/com/example/yvypora/InicialScreen.kt	(date 1680605044687)
@@ -93,7 +93,7 @@
     }
 }
 
-@OptIn(ExperimentalPagerApi::class)
+
 @Composable
 fun UpsideLayout() {
     val offset = remember { mutableStateOf(0f) }
