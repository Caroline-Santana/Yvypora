Index: .idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27_[Changes]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27_[Changes]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27_[Changes]/shelved.patch	(revision db116ad20d84a128d972bc55fba89a836964dff3)
+++ /dev/null	(revision db116ad20d84a128d972bc55fba89a836964dff3)
@@ -1,405 +0,0 @@
-Index: app/src/main/java/com/example/yvypora/ScreenClients/RegisterClient.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.yvypora.ScreenClients\n\n\nimport android.net.Uri\nimport android.os.Bundle\nimport android.util.Log\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.compose.setContent\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.*\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.text.KeyboardOptions\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.saveable.rememberSaveable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.focus.FocusRequester\nimport androidx.compose.ui.focus.focusRequester\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.text.input.KeyboardCapitalization\nimport androidx.compose.ui.text.input.KeyboardType\nimport androidx.compose.ui.text.input.TextFieldValue\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport coil.compose.rememberImagePainter\nimport com.example.yvypora.R\nimport com.example.yvypora.api.cep.getCep\nimport com.example.yvypora.api.commons.createCostumer\nimport com.example.yvypora.models.AddressRegister\nimport com.example.yvypora.models.Costumer\nimport com.example.yvypora.ui.theme.YvyporaTheme\nimport com.example.yvypora.utils.MaskBirth\nimport com.example.yvypora.utils.MaskCep\nimport com.example.yvypora.utils.MaskCpf\nimport com.example.yvypora.utils.ValidationCpf\n\n\nclass RegisterClient : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            YvyporaTheme {\n                Surface(\n                    modifier = Modifier.fillMaxWidth(),\n\n                    ) {\n                    Image(\n                        painter = painterResource(id = R.drawable.logo_no_name),\n                        modifier = Modifier\n                            .height(58.dp)\n                            .width(55.dp)\n                            .padding(horizontal = 28.dp),\n                        alignment = Alignment.BottomStart,\n                        contentDescription = \"logo\",\n\n                        )\n                    Spacer(\n                        modifier = Modifier.height(36.dp)\n                    )\n                    Column(\n                        modifier = Modifier\n                            .fillMaxSize()\n                            .padding(top = 50.dp),\n                        horizontalAlignment = Alignment.CenterHorizontally,\n                        verticalArrangement = Arrangement.Top\n                    ) {\n                        Text(\n                            text = stringResource(id = R.string.register),\n                            modifier = Modifier.padding(top = 35.dp, end = 10.dp),\n                            textAlign = TextAlign.Center,\n                            color = colorResource(id = R.color.darkgreen_yvy),\n                            fontSize = 48.sp\n                        )\n                    }\n                }\n            }\n            Inputs()\n        }\n    }\n}\n\n@Composable\nfun Inputs() {\n    var birthState by rememberSaveable {\n        mutableStateOf(\"\")\n    }\n    var isBirthErrorEmpty by remember {\n        mutableStateOf(false)\n    }\n\n    var cpfState by rememberSaveable {\n        mutableStateOf(\"\")\n    }\n    var isCpfErrorEmpty by remember {\n        mutableStateOf(false)\n    }\n    var isCpfError by remember {\n        mutableStateOf(false)\n    }\n\n    var cepState by remember {\n        mutableStateOf(\"\")\n    }\n    var isCepErrorEmpty by remember {\n        mutableStateOf(false)\n    }\n    var isCepError by remember {\n        mutableStateOf(false)\n    }\n\n    var emailState by remember {\n        mutableStateOf(\"\")\n    }\n    var passState by remember {\n        mutableStateOf(\"\")\n    }\n    val clientName by remember {\n        mutableStateOf(TextFieldValue())\n    }\n    val response = remember {\n        mutableStateOf(\"\")\n    }\n    var nameState by rememberSaveable {\n        mutableStateOf(\"\")\n    }\n    var isNameError by remember {\n        mutableStateOf(false)\n    }\n    var passwordState by rememberSaveable {\n        mutableStateOf(\"\")\n    }\n    var isPasswordError by remember {\n        mutableStateOf(false)\n    }\n\n    val context = LocalContext.current\n\n    Column(\n        modifier =\n        Modifier\n            .fillMaxSize()\n            .fillMaxWidth()\n            .padding(top = 170.dp, start = 24.dp, end = 24.dp)\n            .verticalScroll(state = rememberScrollState(), enabled = true),\n        verticalArrangement = Arrangement.Center,\n\n        ) {\n        //Input nome\n        NameInput(nameState, isNameError, onNameChange =\n        { newName ->\n            val lastChar = if (newName.isEmpty()) {\n                isNameError = true\n                newName\n            } else {\n                newName.get(newName.length - 1)\n                isNameError = false\n            }\n            var newValue = if (lastChar == '.' || lastChar == ',')\n                newName.dropLast(1)\n            else newName\n            nameState = newValue\n\n        })\n\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(35.dp)\n        )\n\n        //Input Email\n        EmailInput(emailState, onEmailChange = { newEmail ->\n            emailState = newEmail\n        })\n\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(35.dp)\n        )\n\n        // Input senha\n        PassInput(passwordState, isPasswordError, onPasswordChange = { newPass ->\n            val mMaxLength = 8\n            isPasswordError = if (newPass.length >= mMaxLength) {\n                true\n            } else {\n                newPass[newPass.length - 1]\n                false\n            }\n\n            if (isPasswordError) newPass.dropLast(1)\n\n            passwordState = newPass\n        })\n\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(35.dp)\n        )\n        //Input photo\n        PhotoInput()\n\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(15.dp)\n        )\n        //Input cpf\n        CpfInput(\n            cpfState, isCpfErrorEmpty, isCpfError,\n            onCpfChange = { newCpf ->\n                isCpfErrorEmpty = newCpf.isEmpty()\n\n                if (cpfState.length > 11) newCpf.dropLast(1)\n\n\n                if (!ValidationCpf.myValidateCPF(newCpf)) {\n                    isCpfError = true\n                } else {\n                    isCpfError = false\n                    isCpfErrorEmpty = false\n                }\n\n\n                cpfState = newCpf\n            },\n        )\n\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(15.dp)\n        )\n\n        //Input cep\n        CepInput(\n            cepState, isCepError, isCepErrorEmpty,\n            onCepChange = { newCep ->\n                isCepErrorEmpty = newCep.isEmpty()\n\n                if (cepState.length > 8) newCep.dropLast(1)\n\n                if (cepState.length == 8) {\n//                    var cep = \"\"\n//                    buscarCep(cepState) {\n//                        cep = it\n//                    }.toString()\n//\n//\n//                    if (cep.isEmpty()) {\n//                        isCepError = true\n//                    } else {\n//                        isCepError = false\n//                        isCepErrorEmpty = false\n//                    }\n                }\n\n                cepState = newCep\n            },\n        )\n\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(35.dp)\n        )\n        //Input birth\n        BirthClient(\n            birthState, isBirthErrorEmpty,\n            onBirthdayChange = { newBirth ->\n                isBirthErrorEmpty = newBirth.isEmpty()\n\n                if (birthState.length > 8) newBirth.dropLast(1)\n\n                birthState = newBirth\n            },\n        )\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(35.dp)\n        )\n\n        var gender by remember { mutableStateOf(\"\") }\n        //Input Gender\n        GenderInputClient(gender, onFemClick = { gender = \"F\" }, onManClick = { gender = \"M\" })\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(35.dp)\n        )\n\n        Button(\n            onClick = {\n                getCep(cepState) {\n                    val cep = it\n                    Log.i(\"teste\", cep.toString())\n\n                    val costumer = Costumer(\n                        name = nameState,\n                        email = emailState,\n                        password = passwordState,\n                        address = AddressRegister(\n                            cep = cep.cep,\n                            addressTypeId = 1,\n                            city = cep.localidade,\n                            uf = cep.uf,\n                            number = 0,\n                            complemento = \"\",\n                            logradouro = cep.logradouro,\n                            neighborhood = cep.bairro,\n                        ),\n                        cpf = cpfState,\n                        birthday = formatBirthday(birthState),\n                        gender = gender[0].toString()\n                    )\n                    // send to create the costumer without a picture\n                    createCostumer(costumer) { _costumer ->\n                        Log.i(\"teste\", _costumer.toString())\n                    }\n                }\n            },\n            colors = ButtonDefaults.buttonColors(Color(83, 141, 34)),\n            modifier = Modifier\n                .width(217.dp)\n                .height(48.dp)\n                .align(Alignment.CenterHorizontally),\n            shape = RoundedCornerShape(5.dp),\n\n            ) {\n            Text(\n                text = stringResource(id = R.string.button_register),\n                color = Color.White,\n                fontSize = 20.sp\n            )\n        }\n        //*********************************************************************\n        Spacer(\n            modifier = Modifier.height(15.dp)\n        )\n    }\n}\n\n@Composable\nfun NameInput(nameState: String, isNameError: Boolean, onNameChange: (String) -> Unit) {\n    val inputsFocusRequest = FocusRequester()\n\n    Text(\n        text = stringResource(id = R.string.name),\n        modifier = Modifier.padding(top = 5.dp),\n        fontSize = 20.sp,\n        textAlign = TextAlign.Start,\n        color = colorResource(id = R.color.darkgreen_yvy)\n    )\n    TextField(\n        value = nameState,\n        onValueChange = onNameChange,\n        colors = TextFieldDefaults.textFieldColors(\n            backgroundColor = Color.Unspecified,\n            focusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            unfocusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            cursorColor = colorResource(id = R.color.darkgreen_yvy)\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .focusRequester(inputsFocusRequest),\n        isError = isNameError,\n        keyboardOptions = KeyboardOptions(\n            keyboardType = KeyboardType.Text,\n            capitalization = KeyboardCapitalization.Sentences\n        ),\n        singleLine = true,\n\n        )\n\n    if (isNameError) {\n        Text(\n            text = stringResource(id = R.string.name_error),\n            modifier = Modifier.fillMaxWidth(),\n            color = Color.Red,\n            textAlign = TextAlign.End\n        )\n    }\n}\n\n@Composable\nfun EmailInput(emailState: String, onEmailChange: (String) -> Unit) {\n\n    val inputsFocusRequest = FocusRequester()\n\n    Text(\n        text = stringResource(id = R.string.email),\n        fontSize = 20.sp,\n        textAlign = TextAlign.Start,\n        color = colorResource(id = R.color.darkgreen_yvy)\n    )\n    TextField(\n        value = emailState,\n        onValueChange = onEmailChange,\n        colors = TextFieldDefaults.textFieldColors(\n            backgroundColor = Color.Unspecified,\n            focusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            unfocusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            cursorColor = colorResource(id = R.color.darkgreen_yvy)\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .focusRequester(inputsFocusRequest),\n        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),\n        singleLine = true,\n        shape = RoundedCornerShape(8.dp),\n    )\n\n\n}\n\n\n@Composable\nfun PassInput(passwordState: String, isPasswordError: Boolean, onPasswordChange: (String) -> Unit) {\n\n\n    val inputsFocusRequest = FocusRequester()\n\n\n    Text(\n        text = stringResource(id = R.string.password),\n        fontSize = 20.sp,\n        textAlign = TextAlign.Start,\n        color = colorResource(id = R.color.darkgreen_yvy)\n    )\n    TextField(\n        value = passwordState,\n        onValueChange = onPasswordChange,\n        colors = TextFieldDefaults.textFieldColors(\n            backgroundColor = Color.Unspecified,\n            focusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            unfocusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            cursorColor = colorResource(id = R.color.darkgreen_yvy)\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .focusRequester(inputsFocusRequest),\n        isError = isPasswordError,\n        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),\n        singleLine = true,\n        shape = RoundedCornerShape(8.dp),\n    )\n    if (isPasswordError) {\n        Text(\n            text = stringResource(id = R.string.message_error_pass2),\n            modifier = Modifier.fillMaxWidth(),\n            color = Color.Red,\n            textAlign = TextAlign.End\n        )\n    }\n\n}\n\n@Composable\nfun PhotoInput() {\n    val imageUri = rememberSaveable { mutableStateOf(\"\") }\n    val painter = rememberImagePainter(\n        if (imageUri.value.isEmpty())\n            R.drawable.adicionar_foto\n        else\n            imageUri.value\n    )\n    val launcher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.GetContent()\n    ) { uri: Uri? ->\n        uri?.let { imageUri.value = it.toString() }\n    }\n\n\n    Column(\n        modifier =\n        Modifier\n            .fillMaxWidth(),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n\n    ) {\n        Text(\n            text = stringResource(id = R.string.profile_picture),\n            fontSize = 20.sp,\n            textAlign = TextAlign.Start,\n            color = colorResource(id = R.color.darkgreen_yvy)\n        )\n        Card(\n            shape = CircleShape,\n            modifier = Modifier\n                .padding(8.dp)\n                .size(115.dp)\n        ) {\n            Image(\n                painter = painter,\n                contentDescription = null,\n                modifier = Modifier\n                    .wrapContentSize()\n                    .padding(start = 5.dp, bottom = 15.dp, top = 12.dp, end = 5.dp)\n                    .clickable { launcher.launch(\"image/*\") },\n                contentScale = ContentScale.Crop\n            )\n\n        }\n    }\n\n}\n\n@Composable\nfun CpfInput(\n    cpfState: String,\n    isCpfErrorEmpty: Boolean,\n    isCpfError: Boolean,\n    onCpfChange: (String) -> Unit\n) {\n\n    val inputsFocusRequest = FocusRequester()\n\n    val context = LocalContext.current\n\n    Text(\n        text = stringResource(id = R.string.title_cpf),\n        fontSize = 20.sp,\n        textAlign = TextAlign.Start,\n        color = colorResource(id = R.color.darkgreen_yvy)\n    )\n    TextField(\n        value = cpfState,\n        onValueChange = onCpfChange,\n        colors = TextFieldDefaults.textFieldColors(\n            backgroundColor = Color.Unspecified,\n            focusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            unfocusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            cursorColor = colorResource(id = R.color.darkgreen_yvy)\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .fillMaxSize()\n            .focusRequester(inputsFocusRequest),\n        isError = isCpfErrorEmpty,\n        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\n        visualTransformation = MaskCpf(),\n        singleLine = true,\n        shape = RoundedCornerShape(8.dp),\n    )\n    if (isCpfErrorEmpty) {\n        Text(\n            text = stringResource(id = R.string.cpf_error_empty),\n            modifier = Modifier.fillMaxWidth(),\n            color = Color.Red,\n            textAlign = TextAlign.End\n        )\n    } else if (isCpfError) {\n        Text(\n            text = stringResource(id = R.string.cpf_error_invalid),\n            modifier = Modifier.fillMaxWidth(),\n            color = Color.Red,\n            textAlign = TextAlign.End\n        )\n    }\n}\n\n@Composable\nfun CepInput(\n    cepState: String,\n    isCepErrorEmpty: Boolean,\n    isCepError: Boolean,\n    onCepChange: (String) -> Unit\n) {\n    val inputsFocusRequest = FocusRequester()\n\n    val context = LocalContext.current\n\n    var cep = \"\"\n\n    Text(\n        text = stringResource(id = R.string.title_cep),\n        fontSize = 20.sp,\n        textAlign = TextAlign.Start,\n        color = colorResource(id = R.color.darkgreen_yvy)\n    )\n\n    TextField(\n        value = cepState,\n        onValueChange = onCepChange,\n        colors = TextFieldDefaults.textFieldColors(\n            backgroundColor = Color.Unspecified,\n            focusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            unfocusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            cursorColor = colorResource(id = R.color.darkgreen_yvy)\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .fillMaxSize()\n            .focusRequester(inputsFocusRequest),\n        isError = isCepErrorEmpty,\n        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\n        visualTransformation = MaskCep(),\n        singleLine = true,\n        shape = RoundedCornerShape(8.dp),\n    )\n    if (isCepErrorEmpty) {\n        Text(\n            text = stringResource(id = R.string.cep_error_empty),\n            modifier = Modifier.fillMaxWidth(),\n            color = Color.Red,\n            textAlign = TextAlign.End\n        )\n    } else if (isCepError) {\n        Text(\n            text = stringResource(id = R.string.cep_error_invalid),\n            modifier = Modifier.fillMaxWidth(),\n            color = Color.Red,\n            textAlign = TextAlign.End\n        )\n    }\n}\n\n@Composable\nfun BirthClient(\n    birthState: String,\n    isBirthErrorEmpty: Boolean,\n    onBirthdayChange: (String) -> Unit\n) {\n\n    val inputsFocusRequest = FocusRequester()\n\n    val context = LocalContext.current\n\n    Text(\n        text = stringResource(id = R.string.titleBirth),\n        fontSize = 20.sp,\n        textAlign = TextAlign.Start,\n        color = colorResource(id = R.color.darkgreen_yvy)\n    )\n    TextField(\n        value = birthState,\n        onValueChange = onBirthdayChange,\n        colors = TextFieldDefaults.textFieldColors(\n            backgroundColor = Color.Unspecified,\n            focusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            unfocusedIndicatorColor = colorResource(id = R.color.darkgreen_yvy),\n            cursorColor = colorResource(id = R.color.darkgreen_yvy)\n        ),\n        modifier = Modifier\n            .fillMaxWidth()\n            .fillMaxSize()\n            .focusRequester(inputsFocusRequest),\n        isError = isBirthErrorEmpty,\n        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),\n        visualTransformation = MaskBirth(),\n        singleLine = true,\n        shape = RoundedCornerShape(8.dp),\n    )\n    if (isBirthErrorEmpty) {\n        Text(\n            text = stringResource(id = R.string.isBirthErrorEmpty),\n            modifier = Modifier.fillMaxWidth(),\n            color = Color.Red,\n            textAlign = TextAlign.End\n        )\n    }\n}\n\n@Composable\nfun GenderInputClient(selected: String, onFemClick: () -> Unit, onManClick: () -> Unit) {\n    Row {\n        RadioButton(\n            selected = selected == \"F\",\n            onClick = onFemClick,\n            colors = RadioButtonDefaults.colors(colorResource(id = R.color.green_yvy))\n        )\n        Text(\n            text = stringResource(id = R.string.gender_f),\n            modifier = Modifier\n                .clickable(onClick = onFemClick)\n                .padding(top = 12.dp, start = 4.dp)\n        )\n        Spacer(modifier = Modifier.size(60.dp))\n\n        RadioButton(\n            selected = selected == \"M\",\n            onClick = onManClick,\n            colors = RadioButtonDefaults.colors(colorResource(id = R.color.green_yvy))\n        )\n        Text(\n            text = stringResource(id = R.string.gender_m),\n            modifier = Modifier\n                .clickable(onClick = onManClick)\n                .padding(top = 15.dp)\n        )\n    }\n}\n\n\nfun formatBirthday(birthday: String): String {\n    val year = birthday.takeLast(4)\n    val month = (birthday[2].toString() + birthday[3].toString()).toString()\n    val day = (birthday[0].toString() + birthday[1].toString()).toString()\n\n    return \"$year-$month-$day\"\n}\n@Preview\n@Composable\nfun InputsPriview() {\n    Inputs()\n}\n\n\n\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/yvypora/ScreenClients/RegisterClient.kt b/app/src/main/java/com/example/yvypora/ScreenClients/RegisterClient.kt
---- a/app/src/main/java/com/example/yvypora/ScreenClients/RegisterClient.kt	(revision 42b21517ed4fd48c3c89db23388cf51c6a5dad7c)
-+++ b/app/src/main/java/com/example/yvypora/ScreenClients/RegisterClient.kt	(date 1683282828767)
-@@ -37,7 +37,7 @@
- import com.example.yvypora.R
- import com.example.yvypora.api.cep.getCep
- import com.example.yvypora.api.commons.createCostumer
--import com.example.yvypora.models.AddressRegister
-+import com.example.yvypora.models.Address
- import com.example.yvypora.models.Costumer
- import com.example.yvypora.ui.theme.YvyporaTheme
- import com.example.yvypora.utils.MaskBirth
-@@ -305,7 +305,7 @@
-                         name = nameState,
-                         email = emailState,
-                         password = passwordState,
--                        address = AddressRegister(
-+                        address = Address(
-                             cep = cep.cep,
-                             addressTypeId = 1,
-                             city = cep.localidade,
-Index: app/src/main/java/com/example/yvypora/models/MarketerCardShopping.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.yvypora.models\n\ndata class MarketerCardShopping(\n    val name: String,\n    val sub_name: String,\n    val photo: Int,\n    val products: List<ProductCardShopping>\n)\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/yvypora/models/MarketerCardShopping.kt b/app/src/main/java/com/example/yvypora/models/MarketerCardShopping.kt
---- a/app/src/main/java/com/example/yvypora/models/MarketerCardShopping.kt	(revision 42b21517ed4fd48c3c89db23388cf51c6a5dad7c)
-+++ b/app/src/main/java/com/example/yvypora/models/MarketerCardShopping.kt	(date 1683284913836)
-@@ -1,6 +1,7 @@
- package com.example.yvypora.models
- 
- data class MarketerCardShopping(
-+    val id_feirante: Int,
-     val name: String,
-     val sub_name: String,
-     val photo: Int,
-Index: app/src/main/java/com/example/yvypora/models/ProductCardShopping.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.yvypora.models\n\nimport com.example.yvypora.ScreenClients.listMarketerCardShopping\nimport com.example.yvypora.ScreenClients.showPaymentBar\nimport com.example.yvypora.ScreenClients.total_value\n\ndata class ProductCardShopping(\n    val id : Int,\n    val name : String,\n    val photo : Int,\n    val isSelected: Boolean,\n    val type_weight: String,\n    val weight_product : Int,\n    val price : Double\n)\n\n\n\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/yvypora/models/ProductCardShopping.kt b/app/src/main/java/com/example/yvypora/models/ProductCardShopping.kt
---- a/app/src/main/java/com/example/yvypora/models/ProductCardShopping.kt	(revision 42b21517ed4fd48c3c89db23388cf51c6a5dad7c)
-+++ b/app/src/main/java/com/example/yvypora/models/ProductCardShopping.kt	(date 1683296119708)
-@@ -1,17 +1,14 @@
- package com.example.yvypora.models
- 
--import com.example.yvypora.ScreenClients.listMarketerCardShopping
--import com.example.yvypora.ScreenClients.showPaymentBar
--import com.example.yvypora.ScreenClients.total_value
--
- data class ProductCardShopping(
--    val id : Int,
--    val name : String,
--    val photo : Int,
-+    val id: Int,
-+    val name: String,
-+    val photo: Int,
-     val isSelected: Boolean,
-     val type_weight: String,
--    val weight_product : Int,
--    val price : Double
-+    var weight_product: Int,
-+    var price: Double,
-+    var qtde: Int = 1,
- )
- 
- 
-Index: app/src/main/java/com/example/yvypora/ScreenClients/ShoppingCartActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.example.yvypora.ScreenClients\n\n\nimport android.annotation.SuppressLint\nimport android.content.Intent\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.foundation.BorderStroke\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.LazyColumn\nimport androidx.compose.foundation.lazy.items\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.colorResource\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.res.stringResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.example.yvypora.R\nimport com.example.yvypora.models.MarketerCardShopping\nimport com.example.yvypora.models.ProductCardShopping\nimport com.example.yvypora.ui.theme.SpaceGrotesk\nimport com.example.yvypora.ui.theme.YvyporaTheme\nimport kotlinx.coroutines.coroutineScope\nimport kotlinx.coroutines.launch\n\n\nclass ShoppingCartActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            YvyporaTheme {\n                // A surface container using the 'background' color from the theme\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colors.background\n                ) {\n                    Column(\n                        modifier = androidx.compose.ui.Modifier\n                            .fillMaxSize()\n                            .fillMaxWidth()\n                    )\n                    {\n\n                        Header()\n                        ShoppingCartMain()\n\n                    }\n                }\n            }\n        }\n    }\n}\n\nvar showPaymentBar by mutableStateOf(false)\nvar total_value by mutableStateOf(0.0)\nval selectedCards = mutableStateListOf<Int>()\nval qtde = mutableMapOf<Int,Int>()\n\n@Composable\nfun ShoppingCartMain() {\n    val selectedQuantity = remember { mutableStateOf(1) }\n    Text(\n        text = stringResource(id = R.string.my_shopping_cart),\n        modifier = androidx.compose.ui.Modifier.fillMaxWidth(),\n        fontSize = 24.sp,\n        textAlign = TextAlign.Center,\n        color = colorResource(id = R.color.darkgreen_yvy)\n    )\n    Box(\n        modifier = androidx.compose.ui.Modifier\n            .fillMaxWidth()\n            .padding(bottom = 10.dp)\n            .fillMaxSize(),\n        contentAlignment = Alignment.BottomCenter\n    )\n    {\n        ListOfMarketerCardShopping(marketers = listMarketerCardShopping, onQuantityChanged = { quantity ->\n            selectedQuantity.value = quantity\n        })\n        CardPay(selectedQuantity.value)\n\n    }\n}\n\n\nval listMarketerCardShopping = mutableStateListOf<MarketerCardShopping>(\n    MarketerCardShopping(\n        name = \"Barraca do Seu Zé\",\n        sub_name = \"Vila Madalena\",\n        photo = R.drawable.buy_history_card_marketer,\n        products = listOf(\n            ProductCardShopping(\n                id = 1,\n                name = \"Abóbora\",\n                type_weight = \"g\",\n                weight_product = 800,\n                isSelected = false,\n                photo = 1,\n                price = 24.00,\n            ),\n            ProductCardShopping(\n                id = 2,\n                name = \"Beterraba\",\n                type_weight = \"g\",\n                weight_product = 800,\n                isSelected = false,\n                photo = 1,\n                price = 22.00,\n            )\n        )\n    ),\n    MarketerCardShopping(\n        name = \"Barraca do Seu Zé\",\n        sub_name = \"Vila Augusta\",\n        photo = R.drawable.buy_history_card_marketer,\n        products = listOf(\n            ProductCardShopping(\n                id = 3,\n                name = \"Abóbora\",\n                type_weight = \"g\",\n                weight_product = 800,\n                isSelected = false,\n                photo = 1,\n                price = 24.00,\n            ),\n            ProductCardShopping(\n                id = 4,\n                name = \"Beterraba\",\n                type_weight = \"g\",\n                weight_product = 800,\n                isSelected = false,\n                photo = 1,\n                price = 22.00,\n            ),\n            ProductCardShopping(\n                id = 5,\n                name = \"Abóbora\",\n                type_weight = \"g\",\n                weight_product = 800,\n                isSelected = false,\n                photo = 1,\n                price = 24.00,\n            ),\n            ProductCardShopping(\n                id = 6,\n                name = \"Abóbora\",\n                type_weight = \"g\",\n                weight_product = 800,\n                isSelected = false,\n                photo = 1,\n                price = 24.00,\n            ),\n        )\n    )\n)\n\n@Composable\nfun ListOfMarketerCardShopping(marketers: List<MarketerCardShopping>, onQuantityChanged: (Int) -> Unit) {\n    LazyColumn {\n        items(marketers) { marketer ->\n            CardMarketerShopping(marketer = marketer, onQuantityChanged)\n        }\n\n    }\n}\n\n@Composable\nfun CardMarketerShopping(marketer: MarketerCardShopping, onQuantityChanged: (Int) -> Unit) {\n\n    var nameCard = marketer.name\n    var subnameCard = marketer.sub_name\n    var showSnackbar by remember { mutableStateOf(false) }\n//    tem que descomentar e usar o que o banco retorna\n//    var photo = marketer.photo\n    var photo = painterResource(id = R.drawable.buy_history_card_marketer)\n    var products = marketer.products\n\n    Card(\n        modifier = Modifier\n            .fillMaxWidth()\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxWidth(),\n            verticalArrangement = Arrangement.Center,\n            horizontalAlignment = Alignment.CenterHorizontally\n        ) {\n            Row(\n                modifier = Modifier\n                    .fillMaxWidth()\n                    .padding(start = 8.dp, end = 8.dp),\n            ) {\n                Image(\n                    painter = photo,\n                    contentDescription = \"\",\n                    modifier = Modifier\n                        .width(120.dp)\n                        .height(120.dp)\n                )\n                Column(\n                    modifier = Modifier\n                        .padding(start = 3.dp, top = 35.dp),\n                ) {\n                    Text(\n                        text = nameCard,\n                        fontSize = 17.sp,\n                        textAlign = TextAlign.Start,\n                        color = colorResource(id = R.color.green_width)\n                    )\n                    Text(\n                        text = subnameCard,\n                        fontWeight = FontWeight.Light,\n                        textAlign = TextAlign.Start,\n                        fontSize = 15.sp,\n                        color = colorResource(id = R.color.green_yvy)\n\n                    )\n\n                }\n            }\n\n            ListOfProductCardShopping(\n                cards = marketer.products,\n                state = showSnackbar,\n                onQuantityChanged = { card, quantity ->\n                    val index = marketer.products.indexOf(card)\n                    if (index >= 0){\n                        val updateProducts = marketer.products.toMutableList()\n                        updateProducts[index] = card.copy(weight_product = quantity)\n//                        listMarketerCardShopping[i] = marketer.copy(products = updateProducts)\n                    }\n                    onQuantityChanged(quantity)\n                }\n            )\n        }\n    }\n}\n\n//val updateMarketers = listMarketerCardShopping.map { marketer ->\n//    val updateProducts = marketer.products.map { card ->\n//        val index = products.indexOf(card)\n//        if (index >= 0){\n//            card.copy(quantity = products[index].quantity)\n//        } else {\n//            card\n//        }\n//    }\n//    marketer.copy(products = updateProducts)\n//}\n//listMarketerCardShopping.clear()\n//listMarketerCardShopping.addAll(updateMarketers)\n@Composable\nfun ListOfProductCardShopping(cards: List<ProductCardShopping>, state: Boolean, onQuantityChanged: (ProductCardShopping, Int) -> Unit) {\n    var stateSnack = state\n    val coroutineScope = rememberCoroutineScope()\n    var valuePay by remember { mutableStateOf(0.0) }\n    LazyColumn(\n        modifier = Modifier\n            .height(300.dp)\n            .padding(top = 5.dp, bottom = 50.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.CenterHorizontally\n//        userScrollEnabled = false\n    ) {\n        items(cards) { card ->\n            CardProductShopping(\n                card = card,\n                isSelected = card.id in selectedCards,\n                onCardSelected = { id ->\n                    showPaymentBar = true\n                    stateSnack = true\n                    onCardProductClick(card.id, selectedCards,qtde)\n                },\n                onQuantityChanged = { quantity ->\n                    onQuantityChanged(card, quantity)\n\n                }\n            )\n        }\n    }\n}\n\n@Composable\nfun CardPay(selectedQuantity: Int) {\n//    val totalPrice = selectedQuantity * 10\n    val context = LocalContext.current\n    if (showPaymentBar) {\n        Card(\n            Modifier\n                .width(349.dp)\n                .height(52.dp),\n            elevation = 10.dp,\n            backgroundColor = colorResource(id = R.color.green_camps),\n\n            border = BorderStroke(3.dp, colorResource(id = R.color.green_camps))\n        ) {\n            Row(\n                modifier = Modifier.padding(start = 18.dp),\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\n                    text = \"Total:\",\n                    color = colorResource(id = R.color.full_dark_yvy),\n                    modifier = Modifier.padding(end = 5.dp),\n                    fontWeight = FontWeight.Bold,\n                    fontSize = 20.sp\n                )\n                Text(\n                    text = \"R$ $total_value\",\n                    modifier = Modifier.padding(end = 67.dp),\n                    color = colorResource(id = R.color.full_dark_yvy),\n                    fontWeight = FontWeight.Bold,\n                    fontSize = 20.sp\n                )\n                Button(\n                    modifier = Modifier\n                        .height(47.dp)\n                        .width(102.dp),\n                    colors = ButtonDefaults.buttonColors(Color(115, 169, 66, 255)),\n                    onClick = {\n                        val intent = Intent(context, CheckoutActivity::class.java)\n                        context.startActivity(intent)\n                    }\n                ) {\n                    Text(\n                        text = stringResource(id = R.string.pay),\n                        fontWeight = FontWeight.Bold,\n                        color = Color.White,\n                        fontSize = 20.sp\n                    )\n                }\n            }\n        }\n    }\n}\n\nfun onCardProductClick(cardId: Int, selectedCards: MutableList<Int>, qtde: MutableMap<Int, Int>) {\n\n    if (selectedCards.contains(cardId)) {\n        selectedCards.remove(cardId)\n    } else {\n        selectedCards.add(cardId)\n    }\n    if (selectedCards.size == 0) {\n        showPaymentBar = false\n    } else {\n        var total = 0.0\n        // settar os valores para somar\n        listMarketerCardShopping.forEach { item ->\n            item.products.forEach { product ->\n                if (selectedCards.contains(product.id)) {\n                    val quantity = qtde[product.id] ?: 1\n                    val price =\n                        if (product.weight_product == 1)\n                            product.price\n                        else\n                            quantity * product.price\n                    total += price\n\n                }\n            }\n        }\n        total_value = total\n    }\n}\n\n\n@Composable\nfun CardProductShopping(\n    card: ProductCardShopping,\n    isSelected: Boolean,\n    onCardSelected: (Boolean) -> Unit,\n    onQuantityChanged: (Int) -> Unit\n) {\n    var qtde by remember { mutableStateOf(1) }\n    var nameProduct = card.name\n//    var photoProduct = card.photo\n    var photoProduct = painterResource(id = R.drawable.abobora_shopping)\n    var typeProduct = card.type_weight\n    var weightProduct = card.weight_product\n    var priceProduct = card.price\n    var accumulatorPrice = 0.0\n    if (qtde == 1) {\n        accumulatorPrice = priceProduct\n    } else {\n        accumulatorPrice = priceProduct * qtde\n    }\n        LaunchedEffect(qtde){\n            onQuantityChanged(qtde)\n        }\n    Column(\n        modifier = Modifier\n            .padding(bottom = 10.dp),\n        verticalArrangement = Arrangement.Center,\n        horizontalAlignment = Alignment.Start\n\n    ) {\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            verticalAlignment = Alignment.Top,\n            horizontalArrangement = Arrangement.Center\n        ) {\n            if (isSelected) {\n                Icon(\n                    painter = painterResource(id = R.drawable.check_full),\n                    modifier = Modifier\n                        .padding(end = 10.dp)\n                        .clickable { onCardSelected(isSelected) },\n                    contentDescription = \"\",\n                    tint = colorResource(id = R.color.green_button)\n                )\n            } else {\n                Icon(\n                    painter = painterResource(id = R.drawable.check_no_full),\n                    modifier = Modifier\n                        .padding(end = 10.dp)\n                        .clickable { onCardSelected(isSelected) },\n                    contentDescription = \"\",\n                    tint = colorResource(id = R.color.green_button)\n                )\n            }\n\n            Card(\n                Modifier\n                    .width(273.dp)\n                    .clickable {\n                        onCardSelected(isSelected)\n                    }\n                    .height(130.dp),\n                elevation = 0.dp,\n                backgroundColor = if (isSelected) colorResource(id = R.color.green_camps_transparent) else Color.White,\n                border = BorderStroke(1.dp, colorResource(id = R.color.green_yvy))\n            ) {\n                Row(\n                    Modifier.width(100.dp),\n                    horizontalArrangement = Arrangement.Center,\n                    verticalAlignment = Alignment.CenterVertically\n                ) {\n                    Column(\n                        modifier = Modifier.width(150.dp),\n                        horizontalAlignment = Alignment.Start,\n                        verticalArrangement = Arrangement.Center\n                    ) {\n                        Text(\n                            text = nameProduct,\n                            Modifier.padding(start = 25.dp),\n                            fontWeight = FontWeight.Bold,\n                            fontSize = 16.sp,\n                            fontFamily = SpaceGrotesk,\n                            color = colorResource(id = R.color.darkgreen_yvy)\n                        )\n                        Image(\n                            painter = photoProduct,\n                            contentDescription = \"\",\n                            modifier = Modifier\n                                .width(128.dp)\n                                .padding(start = 5.dp, top = 5.dp)\n                                .height(63.dp)\n                        )\n                    }\n                    Column(\n                        Modifier\n                            .fillMaxWidth(0.7f),\n                        horizontalAlignment = Alignment.Start,\n                        verticalArrangement = Arrangement.Top\n                    ) {\n                        Box(\n                            modifier = Modifier.fillMaxWidth(),\n                        ) {\n\n                            Text(\n                                text = weightProduct.toString(),\n                                fontWeight = FontWeight.Bold,\n                                fontSize = 12.sp,\n                                fontFamily = SpaceGrotesk,\n                                color = colorResource(id = R.color.dark_gray)\n                            )\n                            Text(\n                                text = typeProduct, fontWeight = FontWeight.Bold,\n                                fontSize = 12.sp,\n                                modifier = Modifier.padding(start = 25.dp),\n                                fontFamily = SpaceGrotesk,\n                                color = colorResource(id = R.color.dark_gray)\n                            )\n                        }\n                        Text(\n                            text = \"R$ $accumulatorPrice\",\n                            fontWeight = FontWeight.Bold,\n                            fontSize = 20.sp,\n                            fontFamily = SpaceGrotesk,\n                            color = colorResource(id = R.color.green_options)\n                        )\n                        Row(\n                            modifier = Modifier\n                                .padding(top = 8.dp)\n                                .width(105.dp)\n                                .height(30.dp),\n                            horizontalArrangement = Arrangement.SpaceBetween,\n                            verticalAlignment = Alignment.CenterVertically\n                        ) {\n                            Box(contentAlignment = Alignment.Center) {\n                                Button(\n                                    onClick = { qtde = (qtde - 1).coerceAtLeast(1) },\n                                    modifier = Modifier\n                                        .height(24.dp)\n                                        .width(28.dp),\n                                    shape = RoundedCornerShape(7.dp),\n                                    colors = ButtonDefaults.buttonColors(Color(217, 217, 217, 255))\n                                ) {\n\n                                }\n                                Icon(\n                                    painter = painterResource(id = R.drawable.remove),\n                                    modifier = Modifier\n                                        .clickable { qtde = (qtde - 1).coerceAtLeast(1) },\n                                    contentDescription = \"\"\n                                )\n                            }\n                            Text(\n                                text = \"$qtde\",\n                                fontSize = 20.sp,\n                                fontWeight = FontWeight.Bold,\n                                color = colorResource(id = R.color.darkgreen_yvy)\n                            )\n                            Box(contentAlignment = Alignment.Center) {\n                                Button(\n                                    onClick = { qtde += 1 },\n                                    modifier = Modifier\n                                        .height(24.dp)\n                                        .width(28.dp),\n                                    shape = RoundedCornerShape(7.dp),\n                                ) {}\n                                Icon(\n                                    painter = painterResource(id = R.drawable.more),\n                                    modifier = Modifier\n                                        .width(15.dp)\n                                        .height(15.dp)\n                                        .clickable { qtde += 1 },\n                                    contentDescription = \"\",\n                                    tint = Color.White\n                                )\n                            }\n\n                        }\n\n\n                    }\n                    Box(\n                        modifier = Modifier\n                            .fillMaxSize()\n                            .padding(top = 11.dp, end = 5.dp)\n                    )\n                    {\n                        Icon(\n                            painter = painterResource(id = R.drawable.trash),\n                            contentDescription = \"\",\n                            modifier = Modifier\n                                .height(33.dp)\n                                .width(33.dp)\n                        )\n                    }\n\n                }\n            }\n        }\n    }\n\n}\n\n//@SuppressLint(\"CoroutineCreationDuringComposition\")\n//@Composable\n//fun SnackBarFunction() {\n//    val scaffoldState = rememberScaffoldState()\n//    val scope = rememberCoroutineScope()\n////Janelinha que aparecia no flutton button\n//\n//    scope.launch {\n//        scaffoldState.snackbarHostState\n//            .showSnackbar(\n//                \"blbla\",\n//                actionLabel = \"bsljdjsskd\",\n//                duration = SnackbarDuration.Indefinite\n//            )\n//    }\n//}\n\n@Preview(showBackground = true)\n@Composable\nfun DefaultPreview4() {\n    YvyporaTheme {\n        Column(\n            modifier = Modifier\n                .fillMaxSize()\n                .fillMaxWidth()\n        )\n        {\n            Header()\n            ShoppingCartMain()\n        }\n\n    }\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/example/yvypora/ScreenClients/ShoppingCartActivity.kt b/app/src/main/java/com/example/yvypora/ScreenClients/ShoppingCartActivity.kt
---- a/app/src/main/java/com/example/yvypora/ScreenClients/ShoppingCartActivity.kt	(revision 42b21517ed4fd48c3c89db23388cf51c6a5dad7c)
-+++ b/app/src/main/java/com/example/yvypora/ScreenClients/ShoppingCartActivity.kt	(date 1683296823198)
-@@ -1,15 +1,12 @@
- package com.example.yvypora.ScreenClients
- 
- 
--import android.annotation.SuppressLint
- import android.content.Intent
- import android.os.Bundle
- import androidx.activity.ComponentActivity
- import androidx.activity.compose.setContent
--import androidx.compose.animation.core.animateFloatAsState
- import androidx.compose.foundation.BorderStroke
- import androidx.compose.foundation.Image
--import androidx.compose.foundation.background
- import androidx.compose.foundation.clickable
- import androidx.compose.foundation.layout.*
- import androidx.compose.foundation.lazy.LazyColumn
-@@ -34,8 +31,6 @@
- import com.example.yvypora.models.ProductCardShopping
- import com.example.yvypora.ui.theme.SpaceGrotesk
- import com.example.yvypora.ui.theme.YvyporaTheme
--import kotlinx.coroutines.coroutineScope
--import kotlinx.coroutines.launch
- 
- 
- class ShoppingCartActivity : ComponentActivity() {
-@@ -68,11 +63,12 @@
- var showPaymentBar by mutableStateOf(false)
- var total_value by mutableStateOf(0.0)
- val selectedCards = mutableStateListOf<Int>()
-+
- val qtde = mutableMapOf<Int,Int>()
- 
- @Composable
- fun ShoppingCartMain() {
--    val selectedQuantity = remember { mutableStateOf(1) }
-+    val selectedPrice = remember { mutableStateOf(0.0) }
-     Text(
-         text = stringResource(id = R.string.my_shopping_cart),
-         modifier = androidx.compose.ui.Modifier.fillMaxWidth(),
-@@ -88,10 +84,11 @@
-         contentAlignment = Alignment.BottomCenter
-     )
-     {
--        ListOfMarketerCardShopping(marketers = listMarketerCardShopping, onQuantityChanged = { quantity ->
--            selectedQuantity.value = quantity
--        })
--        CardPay(selectedQuantity.value)
-+        ListOfMarketerCardShopping(marketers = listMarketerCardShopping){ price ->
-+            selectedPrice.value = price
-+        }
-+        CardPay(total_value)
-+
- 
-     }
- }
-@@ -99,6 +96,7 @@
- 
- val listMarketerCardShopping = mutableStateListOf<MarketerCardShopping>(
-     MarketerCardShopping(
-+        id_feirante = 1,
-         name = "Barraca do Seu Zé",
-         sub_name = "Vila Madalena",
-         photo = R.drawable.buy_history_card_marketer,
-@@ -124,6 +122,7 @@
-         )
-     ),
-     MarketerCardShopping(
-+        id_feirante = 2,
-         name = "Barraca do Seu Zé",
-         sub_name = "Vila Augusta",
-         photo = R.drawable.buy_history_card_marketer,
-@@ -169,22 +168,27 @@
- )
- 
- @Composable
--fun ListOfMarketerCardShopping(marketers: List<MarketerCardShopping>, onQuantityChanged: (Int) -> Unit) {
-+fun ListOfMarketerCardShopping(marketers: List<MarketerCardShopping>,onPriceChanged: (Double) -> Unit) {
-     LazyColumn {
-         items(marketers) { marketer ->
--            CardMarketerShopping(marketer = marketer, onQuantityChanged)
-+            CardMarketerShopping(
-+                marketer = marketer,
-+                onPriceChanged = onPriceChanged
-+            )
-         }
- 
-     }
- }
- 
- @Composable
--fun CardMarketerShopping(marketer: MarketerCardShopping, onQuantityChanged: (Int) -> Unit) {
--
-+fun CardMarketerShopping(
-+    marketer: MarketerCardShopping,
-+    onPriceChanged: (Double) -> Unit
-+) {
-+//    val targetMarketerId = marketer.id_feirante
-     var nameCard = marketer.name
-     var subnameCard = marketer.sub_name
-     var showSnackbar by remember { mutableStateOf(false) }
--//    tem que descomentar e usar o que o banco retorna
- //    var photo = marketer.photo
-     var photo = painterResource(id = R.drawable.buy_history_card_marketer)
-     var products = marketer.products
-@@ -232,39 +236,25 @@
- 
-                 }
-             }
--
-             ListOfProductCardShopping(
-                 cards = marketer.products,
-                 state = showSnackbar,
--                onQuantityChanged = { card, quantity ->
--                    val index = marketer.products.indexOf(card)
--                    if (index >= 0){
--                        val updateProducts = marketer.products.toMutableList()
--                        updateProducts[index] = card.copy(weight_product = quantity)
--//                        listMarketerCardShopping[i] = marketer.copy(products = updateProducts)
--                    }
--                    onQuantityChanged(quantity)
-+                onPriceChanged = { card, price ->
-+                    card.copy(price = price )
-+                    onPriceChanged(price)
-                 }
-             )
-         }
-     }
- }
- 
--//val updateMarketers = listMarketerCardShopping.map { marketer ->
--//    val updateProducts = marketer.products.map { card ->
--//        val index = products.indexOf(card)
--//        if (index >= 0){
--//            card.copy(quantity = products[index].quantity)
--//        } else {
--//            card
--//        }
--//    }
--//    marketer.copy(products = updateProducts)
--//}
--//listMarketerCardShopping.clear()
--//listMarketerCardShopping.addAll(updateMarketers)
-+
- @Composable
--fun ListOfProductCardShopping(cards: List<ProductCardShopping>, state: Boolean, onQuantityChanged: (ProductCardShopping, Int) -> Unit) {
-+fun ListOfProductCardShopping(
-+    cards: List<ProductCardShopping>,
-+    state: Boolean,
-+    onPriceChanged: (ProductCardShopping, Double) -> Unit
-+) {
-     var stateSnack = state
-     val coroutineScope = rememberCoroutineScope()
-     var valuePay by remember { mutableStateOf(0.0) }
-@@ -283,11 +273,18 @@
-                 onCardSelected = { id ->
-                     showPaymentBar = true
-                     stateSnack = true
--                    onCardProductClick(card.id, selectedCards,qtde)
-+                    onCardProductClick(card.id, selectedCards, card.qtde)
-                 },
--                onQuantityChanged = { quantity ->
--                    onQuantityChanged(card, quantity)
-+                onPriceChanged = { quantity ->
-+                    listMarketerCardShopping.map { item ->
-+                        val product = item.products.find {product ->
-+                            product.id == card.id
-+                        }
- 
-+                        val newPrice = product?.price?.times(quantity)
-+                        card.weight_product = quantity
-+                        onPriceChanged(card, newPrice ?: 0.0)
-+                    }
-                 }
-             )
-         }
-@@ -295,8 +292,7 @@
- }
- 
- @Composable
--fun CardPay(selectedQuantity: Int) {
--//    val totalPrice = selectedQuantity * 10
-+fun CardPay(total: Double) {
-     val context = LocalContext.current
-     if (showPaymentBar) {
-         Card(
-@@ -320,7 +316,7 @@
-                     fontSize = 20.sp
-                 )
-                 Text(
--                    text = "R$ $total_value",
-+                    text = "R$ $total",
-                     modifier = Modifier.padding(end = 67.dp),
-                     color = colorResource(id = R.color.full_dark_yvy),
-                     fontWeight = FontWeight.Bold,
-@@ -348,7 +344,7 @@
-     }
- }
- 
--fun onCardProductClick(cardId: Int, selectedCards: MutableList<Int>, qtde: MutableMap<Int, Int>) {
-+fun onCardProductClick(cardId: Int, selectedCards: MutableList<Int>, qtde: Int) {
- 
-     if (selectedCards.contains(cardId)) {
-         selectedCards.remove(cardId)
-@@ -363,14 +359,8 @@
-         listMarketerCardShopping.forEach { item ->
-             item.products.forEach { product ->
-                 if (selectedCards.contains(product.id)) {
--                    val quantity = qtde[product.id] ?: 1
--                    val price =
--                        if (product.weight_product == 1)
--                            product.price
--                        else
--                            quantity * product.price
-+                    val price = qtde * product.price
-                     total += price
--
-                 }
-             }
-         }
-@@ -384,24 +374,27 @@
-     card: ProductCardShopping,
-     isSelected: Boolean,
-     onCardSelected: (Boolean) -> Unit,
--    onQuantityChanged: (Int) -> Unit
-+    onPriceChanged: (Int) -> Unit
-+
- ) {
--    var qtde by remember { mutableStateOf(1) }
-+
-+//    var qtde by remember {
-+//        mutableStateOf(card.qtde)
-+//    }
-+    var (qtde, setQtde) = remember { mutableStateOf(card.qtde) }
-     var nameProduct = card.name
- //    var photoProduct = card.photo
-     var photoProduct = painterResource(id = R.drawable.abobora_shopping)
-     var typeProduct = card.type_weight
-     var weightProduct = card.weight_product
--    var priceProduct = card.price
--    var accumulatorPrice = 0.0
--    if (qtde == 1) {
--        accumulatorPrice = priceProduct
--    } else {
--        accumulatorPrice = priceProduct * qtde
--    }
--        LaunchedEffect(qtde){
--            onQuantityChanged(qtde)
--        }
-+
-+    var priceProduct = card.price * qtde
-+    var accumulatorPrice = priceProduct
-+
-+    LaunchedEffect(qtde){
-+        onPriceChanged(card.id)
-+    }
-+
-     Column(
-         modifier = Modifier
-             .padding(bottom = 10.dp),
-@@ -514,7 +507,9 @@
-                         ) {
-                             Box(contentAlignment = Alignment.Center) {
-                                 Button(
--                                    onClick = { qtde = (qtde - 1).coerceAtLeast(1) },
-+                                    onClick = {
-+                                        setQtde(qtde - 1)
-+                                              },
-                                     modifier = Modifier
-                                         .height(24.dp)
-                                         .width(28.dp),
-@@ -526,19 +521,21 @@
-                                 Icon(
-                                     painter = painterResource(id = R.drawable.remove),
-                                     modifier = Modifier
--                                        .clickable { qtde = (qtde - 1).coerceAtLeast(1) },
-+                                        .clickable {
-+                                            setQtde(qtde -1)
-+                                            },
-                                     contentDescription = ""
-                                 )
-                             }
-                             Text(
--                                text = "$qtde",
-+                                text = "${qtde} ",
-                                 fontSize = 20.sp,
-                                 fontWeight = FontWeight.Bold,
-                                 color = colorResource(id = R.color.darkgreen_yvy)
-                             )
-                             Box(contentAlignment = Alignment.Center) {
-                                 Button(
--                                    onClick = { qtde += 1 },
-+                                    onClick = { setQtde(qtde + 1) },
-                                     modifier = Modifier
-                                         .height(24.dp)
-                                         .width(28.dp),
-@@ -549,7 +546,10 @@
-                                     modifier = Modifier
-                                         .width(15.dp)
-                                         .height(15.dp)
--                                        .clickable { qtde += 1 },
-+                                        .clickable {
-+
-+                                            setQtde(qtde + 1)
-+                                        },
-                                     contentDescription = "",
-                                     tint = Color.White
-                                 )
-@@ -581,6 +581,7 @@
- 
- }
- 
-+
- //@SuppressLint("CoroutineCreationDuringComposition")
- //@Composable
- //fun SnackBarFunction() {
Index: .idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27__Changes_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27__Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27__Changes_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27__Changes_.xml	(revision db116ad20d84a128d972bc55fba89a836964dff3)
+++ /dev/null	(revision db116ad20d84a128d972bc55fba89a836964dff3)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_05_05_23_11_27_[Changes]" date="1683296859376" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_05_05_23_11_27_[Changes]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 05/05/23 11:27 [Changes]" />
-</changelist>
\ No newline at end of file
